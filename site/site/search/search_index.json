{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"fswlib Documentation","text":""},{"location":"#embedding-class","title":"Embedding class","text":"<p>               Bases: <code>Module</code></p> <p>Embedding module implementing the Fourier Sliced-Wasserstein (FSW) embedding.</p> <p>This module computes a fixed-length representation of input multisets or measures by projecting them onto random (or learned) one-dimensional slices, applying a variant of the Sliced Wasserstein transform in the Fourier domain.</p> <p>Designed for use with PyTorch, and optionally supports a custom CUDA extension for faster computation on sparse inputs.</p> <p>See the ICLR 2025 paper \"Fourier Sliced-Wasserstein Embedding for Multisets and Measures\" by Tal Amir and Nadav Dym for details.</p>"},{"location":"#fswlib.FSWEmbedding._d_in","title":"<code>_d_in = d_in</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.d_edge","title":"<code>d_edge = d_edge</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._encode_total_mass","title":"<code>_encode_total_mass = encode_total_mass</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._total_mass_padding_thresh","title":"<code>_total_mass_padding_thresh = total_mass_padding_thresh</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._total_mass_encoding_method","title":"<code>_total_mass_encoding_method = total_mass_encoding_method</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._total_mass_encoding_function","title":"<code>_total_mass_encoding_function = total_mass_encoding_function</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.cartesian_mode","title":"<code>cartesian_mode = False</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.collapse_output_axes","title":"<code>collapse_output_axes = False</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._d_out","title":"<code>_d_out = d_out</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.num_slices","title":"<code>num_slices = d_out - total_mass_encoding_dim</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.num_frequencies","title":"<code>num_frequencies = d_out - total_mass_encoding_dim</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.minimize_slice_coherence","title":"<code>minimize_slice_coherence = minimize_slice_coherence</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.learnable_slices","title":"<code>learnable_slices = learnable_slices</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.learnable_frequencies","title":"<code>learnable_frequencies = learnable_frequencies</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.learnable_powers","title":"<code>learnable_powers = learnable_powers</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._frequency_init","title":"<code>_frequency_init = frequency_init</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._enable_bias","title":"<code>_enable_bias = enable_bias</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._device_new","title":"<code>_device_new = device</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._dtype_new","title":"<code>_dtype_new = dtype</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._use_custom_cuda_extension_if_available","title":"<code>_use_custom_cuda_extension_if_available = use_custom_cuda_extension_if_available</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._fail_if_cuda_extension_load_fails","title":"<code>_fail_if_cuda_extension_load_fails = fail_if_cuda_extension_load_fails</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._report","title":"<code>_report = report</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding._report_on_coherence_minimization","title":"<code>_report_on_coherence_minimization = report_on_coherence_minimization</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.slice_vectors","title":"<code>slice_vectors = None</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.frequencies","title":"<code>frequencies = None</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.bias","title":"<code>bias = None</code>  <code>instance-attribute</code>","text":""},{"location":"#fswlib.FSWEmbedding.encode_total_mass","title":"<code>encode_total_mass</code>  <code>property</code>","text":""},{"location":"#fswlib.FSWEmbedding.total_mass_encoding_function","title":"<code>total_mass_encoding_function</code>  <code>property</code>","text":"<p>Which function is used to encode total mass.</p>"},{"location":"#fswlib.FSWEmbedding.total_mass_encoding_method","title":"<code>total_mass_encoding_method</code>  <code>property</code>","text":"<p>Which method is used to encode total mass.</p>"},{"location":"#fswlib.FSWEmbedding.d_in","title":"<code>d_in</code>  <code>property</code>","text":"<p>int: Ambient dimension of the input elements.</p> <p>Returns:</p> Type Description <code>int</code> <p>The input dimensionality of the multiset elements (i.e., the last dimension of the input tensors).</p> Notes <p>This value is set at initialization and determines the expected feature dimension of input points.</p> See Also <p>init : The <code>d_in</code> argument specifies this value at initialization.</p>"},{"location":"#fswlib.FSWEmbedding.d_out","title":"<code>d_out</code>  <code>property</code>","text":"<p>int: Dimensionality of the embedding output.</p> <p>Returns:</p> Type Description <code>int</code> <p>The dimension of the vector produced by the embedding for each multiset or distribution.</p> Notes <p>This value is set at initialization and governs the size of the embedding output.</p> See Also <p>init : The <code>d_out</code> argument specifies this value at initialization.</p>"},{"location":"#fswlib.FSWEmbedding.device","title":"<code>device</code>  <code>property</code>","text":"<p>torch.device: The device on which the module's parameters and buffers are stored.</p> <p>Returns:</p> Type Description <code>device</code> <p>The PyTorch device (<code>'cpu'</code>, <code>'cuda'</code>, etc.) where the embedding computations will take place.</p> Notes <p>This behaves like the <code>device</code> property in standard PyTorch modules.</p> See Also <p>init : The <code>device</code> can be specified at initialization.</p>"},{"location":"#fswlib.FSWEmbedding.dtype","title":"<code>dtype</code>  <code>property</code>","text":"<p>torch.dtype: The default data type used by the module.</p> <p>Returns:</p> Type Description <code>dtype</code> <p>The data type (<code>torch.float32</code>, <code>torch.float64</code>, etc.) of the module\u2019s parameters and buffers.</p> Notes <p>This behaves like the <code>dtype</code> property in standard PyTorch modules.</p> See Also <p>init : The <code>dtype</code> can be specified at initialization.</p>"},{"location":"#fswlib.FSWEmbedding.__init__","title":"<code>__init__(d_in, d_out=None, num_slices=None, num_frequencies=None, collapse_output_axes=False, d_edge=0, encode_total_mass=False, total_mass_encoding_function='identity', total_mass_encoding_method='plain', total_mass_padding_thresh=1.0, learnable_slices=False, learnable_frequencies=False, learnable_powers=False, frequency_init='random', minimize_slice_coherence=False, enable_bias=True, device=None, dtype=None, use_custom_cuda_extension_if_available=None, fail_if_cuda_extension_load_fails=False, report=False, user_warnings=True, report_on_coherence_minimization=False)</code>","text":"<p>Fourier Sliced-Wasserstein embedding module.</p> <p>Parameters:</p> Name Type Description Default <code>d_in</code> <code>int</code> <p>Dimension of the input vectors in each multiset or measure.</p> required <code>d_out</code> <code>int</code> <p>Desired embedding dimension. If not specified, <code>n_slices</code> and <code>n_frequencies</code> must be provided.</p> <code>None</code> <code>n_slices</code> <code>int</code> <p>Number of slice directions (used in Cartesian mode). Ignored if <code>d_out</code> is specified.</p> required <code>n_frequencies</code> <code>int</code> <p>Number of frequency values per slice (used in Cartesian mode). Ignored if <code>d_out</code> is specified.</p> required <code>collapse_frequencies</code> <code>bool</code> <p>If True, flattens the slice and frequency axes into a single output dimension.</p> <code>False</code> <code>d_edge</code> <code>int</code> <p>Dimension of edge features (for use with graph inputs).</p> <code>0</code> <code>encode_total_mass</code> <code>bool</code> <p>Whether to encode the total mass (i.e., multiset size) in the embedding.</p> <code>False</code> <code>total_mass_encoding_function</code> <code>str</code> <p>Function used to transform the total mass before embedding. Options: 'identity', 'sqrt', 'log'.</p> <code>'identity'</code> <code>total_mass_encoding_method</code> <code>str</code> <p>Method used to incorporate total mass into the embedding. Options: 'plain', 'homog', 'homog_alt'.</p> <code>'plain'</code> <code>total_mass_pad_thresh</code> <code>float or int</code> <p>Minimum mass threshold before padding is applied to input multisets.</p> <code>1.0</code> <code>learnable_slices</code> <code>bool</code> <p>Whether to learn the slice directions via gradient descent.</p> <code>False</code> <code>learnable_frequencies</code> <code>bool</code> <p>Whether to learn the frequency values via gradient descent.</p> <code>False</code> <code>learnable_powers</code> <code>bool</code> <p>Whether to learn the power exponents used in the computation.</p> <code>False</code> <code>frequency_init</code> <code>float or str or tuple of float or FrequencyInitMethod</code> <p>Strategy used to initialize the frequencies. Accepts: - a float (fixed frequency), - a tuple (low, high) defining an interval to sample from, - a string ('random' or 'even'), - or a <code>FrequencyInitMethod</code> enum value.</p> <code>'random'</code> <code>minimize_slice_coherence</code> <code>bool</code> <p>Whether to optimize the slices to reduce directional coherence.</p> <code>False</code> <code>enable_bias</code> <code>bool</code> <p>Whether to add a learnable bias vector to the embedding.</p> <code>True</code> <code>device</code> <code>device or int or str</code> <p>Device on which to initialize parameters (e.g., 'cpu' or 'cuda').</p> <code>None</code> <code>dtype</code> <code>dtype</code> <p>Data type for floating-point values (e.g., torch.float32).</p> <code>None</code> <code>use_custom_cuda_extension_if_available</code> <code>bool</code> <p>Whether to use a custom CUDA extension if it is available.</p> <code>None</code> <code>fail_if_cuda_extension_load_fails</code> <code>bool</code> <p>If True, raises an error if the CUDA extension cannot be loaded.</p> <code>False</code> <code>report</code> <code>bool</code> <p>Whether to print configuration details after initialization.</p> <code>False</code> <code>user_warnings</code> <code>bool</code> <p>If False, suppresses all user-facing warnings.</p> <code>True</code> <code>report_on_coherence_minimization</code> <code>bool</code> <p>If True, logs diagnostic output during coherence minimization.</p> <code>False</code> See Also <p>FrequencyInitMethod : Enum class for valid frequency initialization strategies. TotalMassEncodingFunction : Enum class for total mass transformations.</p>"},{"location":"#fswlib.FSWEmbedding.reset_parameters","title":"<code>reset_parameters(frequency_init=None, minimize_slice_coherence=None, report=None, report_on_coherence_minimization=None)</code>","text":""},{"location":"#fswlib.FSWEmbedding.to","title":"<code>to(*args, **kwargs)</code>","text":""},{"location":"#fswlib.FSWEmbedding._generate_embedding_parameters","title":"<code>_generate_embedding_parameters(d_in, num_slices, num_frequencies, cartesian_mode, collapse_output_axes, total_mass_encoding_dim, frequency_init, minimize_slice_coherence, device, report, report_on_coherence_minimization)</code>  <code>staticmethod</code>","text":""},{"location":"#fswlib.FSWEmbedding._spread_freqs_at_interval","title":"<code>_spread_freqs_at_interval(center, radius)</code>","text":""},{"location":"#fswlib.FSWEmbedding.forward","title":"<code>forward(X, W='unit', X_edge=None, graph_mode=False, serialize_num_slices=None)</code>","text":"<p>Compute the embedding of a multiset, measure, or graph input.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>Tensor</code> <p>Input tensor of shape <code>(n, d_in)</code> or <code>(..., n, d_in)</code> for batched input.</p> required <code>W</code> <code>Tensor or str</code> <p>Weights tensor of shape <code>(n,)</code> or <code>(..., n)</code> corresponding to the importance of each point in the input. If 'unit', uniform weights are used.</p> <code>'unit'</code> <code>X_edge</code> <code>Tensor</code> <p>Optional edge features tensor, required if <code>d_edge &gt; 0</code>.</p> <code>None</code> <code>graph_mode</code> <code>bool</code> <p>If True, interprets <code>W</code> as an adjacency matrix and performs neighbor-aggregated embedding as used in graph-based settings.</p> <code>False</code> <code>serialize_num_slices</code> <code>int</code> <p>If set, splits the computation into serialized blocks of slices to reduce memory usage.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>The embedding tensor of shape <code>(d_out,)</code> or with additional batch dimensions.</p> Notes <p>If <code>n_slices</code> and <code>n_frequencies</code> were specified during construction, the output shape is either <code>(..., n_slices, n_frequencies)</code> or <code>(..., n_slices * n_frequencies)</code> depending on <code>collapse_frequencies</code>.</p> See Also <p>FSWEmbedding.init : Constructor for configuration options.</p>"},{"location":"#fswlib.FSWEmbedding._forward_helper","title":"<code>_forward_helper(X, W, slice_vectors, frequencies, graph_mode, X_edge, cartesian_mode, batch_dims, use_custom_cuda_extension_if_available, fail_if_cuda_extension_load_fails)</code>  <code>staticmethod</code>","text":""},{"location":"#fswlib.FSWEmbedding._get_mutual_coherence","title":"<code>_get_mutual_coherence()</code>","text":""},{"location":"#fswlib.FSWEmbedding._total_mass_homog_alt_encoding_part1","title":"<code>_total_mass_homog_alt_encoding_part1(totmass)</code>  <code>staticmethod</code>","text":""},{"location":"#fswlib.FSWEmbedding._total_mass_homog_alt_encoding_part2","title":"<code>_total_mass_homog_alt_encoding_part2(totmass)</code>  <code>staticmethod</code>","text":""}]}